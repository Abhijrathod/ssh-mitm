SSH Fingerprints
================

Recognizing clients with known fingerprints
-------------------------------------------

If the client is already in possession of a fingerprint, the received fingerprint is compared with it. If the fingerprints do not match, a warning is issued and the connection is terminated.

However, a Man in the Middle attack should remain undetected for as long as possible. For this reason, it is necessary to prevent the warnings generated by the client.

RFC-4253 defines how the key exchange works. A list of supported algorithms is sent to the server. The first entry defines the preferred algorithm.

This behavior can be used to find out whether a client has already stored a fingerprint for the current connection or not.

In a Man in the Middle attack, this knowledge can be used to not intercept clients that would issue a warning or to pass the connection through to the actual destination server.

An exemplary key exchange with and without a known fingerprint could look as follows:


+------------------------+------------------------+
| New Fingerprint        | Known Fingerprint      |
+========================+========================+
| ssh-ed25519            | ssh-rsa                |
+------------------------+------------------------+
| ecdsa-sha2-nistp256    | ssh-ed25519            |
+------------------------+------------------------+
| ecdsa-sha2-nistp384    | ecdsa-sha2-nistp256    |
+------------------------+------------------------+
| ecdsa-sha2-nistp521    | ecdsa-sha2-nistp384    |
+------------------------+------------------------+
| ssh-rsa                | ecdsa-sha2-nistp521    |
+------------------------+------------------------+
| ssh-dss                | ssh-dss                |
+------------------------+------------------------+

If the fingerprint is not known, the list is sent to the server with a predefined sequence.
However, if the client has already saved a fingerprint for the server, the last used algorithm used is put first.


Testing with SSH-MITM
"""""""""""""""""""""

SSH-MITM has the possibility to check on an incoming connection if a client has a known fingerprint or not.

For this SSH-MITM must be started without additional parameters.

.. code-block:: none

    $ ssh-mitm
    [INFO]  connected client version: SSH-2.0-OpenSSH_8.2p1 Ubuntu-4ubuntu0.3
    [INFO]  openssh: Client has a locally cached remote fingerprint!


Mitigation
""""""""""

Depending on which client is used, it must be configured differently:

* **Dropbear:** not vulnerable
* **OpenSSH:** :ref:`CVE-2020-14145`
* **PuTTY:** :ref:`CVE-2020-14002`
